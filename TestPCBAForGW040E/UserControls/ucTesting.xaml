<UserControl x:Class="TestPCBAForGW040E.UserControls.ucTesting"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:TestPCBAForGW040E.UserControls"
             mc:Ignorable="d" 
             d:DesignHeight="500" d:DesignWidth="500" Loaded="UserControl_Loaded">

    <Border CornerRadius="5,5,5,5" Background="#FF777777">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="0"/>
                <RowDefinition Height="3"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="50"/>
            </Grid.RowDefinitions>
            
            <Grid Grid.Row="0">
                <ScrollViewer>
                    <TextBox Background="Transparent" Foreground="White" AcceptsReturn="True" IsReadOnly="True" Text="{Binding Path=ERRORMESSAGE, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}"></TextBox>
                </ScrollViewer>
            </Grid>
            <GridSplitter Background="#FF00BFA5" Grid.Row="1" VerticalAlignment="Stretch" HorizontalAlignment="Stretch"></GridSplitter>
            <ScrollViewer  Grid.Row="2" Background="#FFFFFFFF">
                <StackPanel x:Name="spTesting">

                    <!--Upload Firmware-->
                    <Expander IsExpanded="{Binding Path=fwExpander, Mode=OneWay}" Margin="0,0,0,10">
                        <Expander.Header>
                            <Grid Height="20">
                                <WrapPanel HorizontalAlignment="Left">
                                    <CheckBox x:Name="ckFW" Margin="10,0,0,0" IsEnabled="False" IsChecked="{Binding Path=flagFW, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" FontWeight="Bold" VerticalAlignment="Top" Style="{StaticResource androidCheckBox}"></CheckBox>
                                    <TextBlock Height="20" FontSize="14" FontWeight="Bold" Foreground="{Binding ElementName=tbFWstatus, Path=Foreground, Mode=OneWay}" Text="UPLOAD FIRMWARE"/>
                                    <TextBlock x:Name="tbFWstatus" Height="20" Margin="10,0,0,0" FontSize="14" FontWeight="Bold" Text="{Binding Path=fwStatusContent, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}">
                                        <TextBlock.Style>
                                            <Style TargetType="TextBlock">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding fwStatusContent}" Value="=> Waiting...">
                                                        <Setter Property="Foreground" Value="{StaticResource colorTextWait}"/>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding fwStatusContent}" Value="=> FAIL">
                                                        <Setter Property="Foreground" Value="{StaticResource colorTextNG}"/>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding fwStatusContent}" Value="=> PASS">
                                                        <Setter Property="Foreground" Value="{StaticResource colorTextOK}"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </TextBlock.Style>
                                    </TextBlock>
                                </WrapPanel>
                            </Grid>
                        </Expander.Header>
                        <Expander.Style>
                            <Style TargetType="Expander">
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=ckFW, Path=IsChecked, Mode=OneWay}" Value="True">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Expander.Style>

                        <StackPanel Margin="20,5,0,5">
                            <DataGrid x:Name="fwDataGrid" ItemsSource="{Binding}" CanUserAddRows="False" AutoGenerateColumns="False" RowHeaderWidth="0" LostFocus="DataGrid_LostFocus"  GridLinesVisibility="None">
                                <DataGrid.Columns>
                                    <DataGridTextColumn Binding="{Binding INDEX, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="INDEX"/>
                                    <DataGridTextColumn Binding="{Binding STEPNAME, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="STEPNAME"/>
                                    <DataGridTextColumn Binding="{Binding STANDARD, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="STANDARD"/>
                                    <DataGridTextColumn Binding="{Binding ACTUAL, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="ACTUAL"/>
                                    <DataGridTextColumn Binding="{Binding RETRY, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="RETRY"/>
                                    <DataGridTextColumn Binding="{Binding TIMEOUT, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="TIMEOUT"/>
                                    <DataGridTextColumn Binding="{Binding JUDGED, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="JUDGED"/>
                                </DataGrid.Columns>

                                <DataGrid.CellStyle>
                                    <Style TargetType="DataGridCell">
                                        <Setter Property="BorderThickness" Value="1,1,1,1"/>
                                        <Setter Property="BorderBrush" Value="#FFDCDCDC"/>
                                    </Style>
                                </DataGrid.CellStyle>

                                <DataGrid.RowStyle>
                                    <Style TargetType="DataGridRow">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding JUDGED}" Value="?">
                                                <Setter Property="Background" Value="{StaticResource colorRowBackgroundReady}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding JUDGED}" Value="waiting...">
                                                <Setter Property="Background" Value="{StaticResource colorRowBackgroundWait}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding JUDGED}" Value="PASS">
                                                <Setter Property="Background" Value="{StaticResource colorRowBackgroundPass}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding JUDGED}" Value="FAIL">
                                                <Setter Property="Background" Value="{StaticResource colorRowBackgroundFail}"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGrid.RowStyle>
                            </DataGrid>
                        </StackPanel>
                    </Expander>

                    <!--Write MAC Address-->
                    <Expander IsExpanded="{Binding Path=macExpander, Mode=OneWay}" Margin="0,0,0,10">
                        <Expander.Header>
                            <WrapPanel HorizontalAlignment="Left">
                                <CheckBox x:Name="ckMAC" Margin="10,0,0,0" IsEnabled="False" IsChecked="{Binding Path=flagMAC, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" FontWeight="Bold" VerticalAlignment="Top" Style="{StaticResource androidCheckBox}"></CheckBox>
                                <TextBlock FontSize="14" FontWeight="Bold" Foreground="{Binding ElementName=tbMACstatus, Path=Foreground, Mode=OneWay}" Text="WRITE MAC ADDRESS"/>
                                <TextBlock x:Name="tbMACstatus" Height="20" Margin="10,0,0,0" FontSize="14" FontWeight="Bold" Text="{Binding Path=macStatusContent, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}">
                                    <TextBlock.Style>
                                        <Style TargetType="TextBlock">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding macStatusContent}" Value="=> Waiting...">
                                                    <Setter Property="Foreground" Value="{StaticResource colorTextWait}"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding macStatusContent}" Value="=> FAIL">
                                                    <Setter Property="Foreground" Value="{StaticResource colorTextNG}"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding macStatusContent}" Value="=> PASS">
                                                    <Setter Property="Foreground" Value="{StaticResource colorTextOK}"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                            </WrapPanel>
                        </Expander.Header>
                        <Expander.Style>
                            <Style TargetType="Expander">
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=ckMAC, Path=IsChecked, Mode=OneWay}" Value="True">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Expander.Style>
                        <StackPanel Margin="20,5,0,5">
                            <DataGrid x:Name="macDataGrid" ItemsSource="{Binding}" CanUserAddRows="False" AutoGenerateColumns="False" RowHeaderWidth="0" LostFocus="DataGrid_LostFocus" GridLinesVisibility="None">
                                <DataGrid.Columns>
                                    <DataGridTextColumn Binding="{Binding INDEX, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="INDEX"/>
                                    <DataGridTextColumn Binding="{Binding STEPNAME, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="STEPNAME"/>
                                    <DataGridTextColumn Binding="{Binding STANDARD, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="STANDARD"/>
                                    <DataGridTextColumn Binding="{Binding ACTUAL, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="ACTUAL"/>
                                    <DataGridTextColumn Binding="{Binding RETRY, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="RETRY"/>
                                    <DataGridTextColumn Binding="{Binding TIMEOUT, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="TIMEOUT"/>
                                    <DataGridTextColumn Binding="{Binding JUDGED, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="JUDGED"/>
                                </DataGrid.Columns>

                                <DataGrid.CellStyle>
                                    <Style TargetType="DataGridCell">
                                        <Setter Property="BorderThickness" Value="1,1,1,1"/>
                                        <Setter Property="BorderBrush" Value="#FFDCDCDC"/>
                                    </Style>
                                </DataGrid.CellStyle>

                                <DataGrid.RowStyle>
                                    <Style TargetType="DataGridRow">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding JUDGED}" Value="?">
                                                <Setter Property="Background" Value="{StaticResource colorRowBackgroundReady}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding JUDGED}" Value="waiting...">
                                                <Setter Property="Background" Value="{StaticResource colorRowBackgroundWait}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding JUDGED}" Value="PASS">
                                                <Setter Property="Background" Value="{StaticResource colorRowBackgroundPass}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding JUDGED}" Value="FAIL">
                                                <Setter Property="Background" Value="{StaticResource colorRowBackgroundFail}"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGrid.RowStyle>

                            </DataGrid>
                        </StackPanel>
                    </Expander>

                    <!--Check LAN Ports-->
                    <Expander IsExpanded="{Binding Path=lanExpander, Mode=OneWay}" Margin="0,0,0,10">
                        <Expander.Header>
                            <WrapPanel HorizontalAlignment="Left">
                                <CheckBox x:Name="ckLAN" Margin="10,0,0,0" IsEnabled="False" IsChecked="{Binding Path=flagLAN, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" FontWeight="Bold" VerticalAlignment="Top" Style="{StaticResource androidCheckBox}"></CheckBox>
                                <TextBlock FontSize="14" FontWeight="Bold" Foreground="{Binding ElementName=tbLANstatus, Path=Foreground, Mode=OneWay}" Text="CHECK LAN"/>
                                <TextBlock x:Name="tbLANstatus" Height="20" Margin="10,0,0,0" FontSize="14" FontWeight="Bold" Text="{Binding Path=lanStatusContent, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}">
                                    <TextBlock.Style>
                                        <Style TargetType="TextBlock">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding lanStatusContent}" Value="=> Waiting...">
                                                    <Setter Property="Foreground" Value="{StaticResource colorTextWait}"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding lanStatusContent}" Value="=> FAIL">
                                                    <Setter Property="Foreground" Value="{StaticResource colorTextNG}"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding lanStatusContent}" Value="=> PASS">
                                                    <Setter Property="Foreground" Value="{StaticResource colorTextOK}"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                            </WrapPanel>
                        </Expander.Header>
                        <Expander.Style>
                            <Style TargetType="Expander">
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=ckLAN, Path=IsChecked, Mode=OneWay}" Value="True">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Expander.Style>

                        <StackPanel Margin="20,5,0,5">
                            <DataGrid x:Name="lanDataGrid" ItemsSource="{Binding}" CanUserAddRows="False" AutoGenerateColumns="False" RowHeaderWidth="0" LostFocus="DataGrid_LostFocus" GridLinesVisibility="None">
                                <DataGrid.Columns>
                                    <DataGridTextColumn Binding="{Binding INDEX, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="INDEX"/>
                                    <DataGridTextColumn Binding="{Binding STEPNAME, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="STEPNAME"/>
                                    <DataGridTextColumn Binding="{Binding STANDARD, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="STANDARD"/>
                                    <DataGridTextColumn Binding="{Binding ACTUAL, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="ACTUAL"/>
                                    <DataGridTextColumn Binding="{Binding RETRY, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="RETRY"/>
                                    <DataGridTextColumn Binding="{Binding TIMEOUT, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="TIMEOUT"/>
                                    <DataGridTextColumn Binding="{Binding JUDGED, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="JUDGED"/>
                                </DataGrid.Columns>

                                <DataGrid.CellStyle>
                                    <Style TargetType="DataGridCell">
                                        <Setter Property="BorderThickness" Value="1,1,1,1"/>
                                        <Setter Property="BorderBrush" Value="#FFDCDCDC"/>
                                    </Style>
                                </DataGrid.CellStyle>

                                <DataGrid.RowStyle>
                                    <Style TargetType="DataGridRow">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding JUDGED}" Value="?">
                                                <Setter Property="Background" Value="{StaticResource colorRowBackgroundReady}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding JUDGED}" Value="waiting...">
                                                <Setter Property="Background" Value="{StaticResource colorRowBackgroundWait}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding JUDGED}" Value="PASS">
                                                <Setter Property="Background" Value="{StaticResource colorRowBackgroundPass}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding JUDGED}" Value="FAIL">
                                                <Setter Property="Background" Value="{StaticResource colorRowBackgroundFail}"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGrid.RowStyle>

                            </DataGrid>
                        </StackPanel>
                    </Expander>

                    <!--Check USB 3.0-->
                    <Expander IsExpanded="{Binding Path=usbExpander, Mode=OneWay}" Margin="0,0,0,10">
                        <Expander.Header>
                            <WrapPanel HorizontalAlignment="Left">
                                <CheckBox x:Name="ckUSB" Margin="10,0,0,0" IsEnabled="False" IsChecked="{Binding Path=flagUSB, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" FontWeight="Bold" VerticalAlignment="Top" Style="{StaticResource androidCheckBox}"></CheckBox>
                                <TextBlock FontSize="14" FontWeight="Bold" Foreground="{Binding ElementName=tbUSBstatus, Path=Foreground, Mode=OneWay}" Text="CHECK USB 3.0"></TextBlock>
                                <TextBlock x:Name="tbUSBstatus" Height="20" Margin="10,0,0,0" FontSize="14" FontWeight="Bold" Text="{Binding Path=usbStatusContent, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}">
                                    <TextBlock.Style>
                                        <Style TargetType="TextBlock">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding usbStatusContent}" Value="=> Waiting...">
                                                    <Setter Property="Foreground" Value="{StaticResource colorTextWait}"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding usbStatusContent}" Value="=> FAIL">
                                                    <Setter Property="Foreground" Value="{StaticResource colorTextNG}"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding usbStatusContent}" Value="=> PASS">
                                                    <Setter Property="Foreground" Value="{StaticResource colorTextOK}"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                            </WrapPanel>
                        </Expander.Header>
                        <Expander.Style>
                            <Style TargetType="Expander">
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=ckUSB, Path=IsChecked, Mode=OneWay}" Value="True">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Expander.Style>

                        <StackPanel Margin="20,5,0,5">
                            <DataGrid x:Name="usbDataGrid" ItemsSource="{Binding}" CanUserAddRows="False" AutoGenerateColumns="False" RowHeaderWidth="0" LostFocus="DataGrid_LostFocus" GridLinesVisibility="None">
                                <DataGrid.Columns>
                                    <DataGridTextColumn Binding="{Binding INDEX, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="INDEX"/>
                                    <DataGridTextColumn Binding="{Binding STEPNAME, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="STEPNAME"/>
                                    <DataGridTextColumn Binding="{Binding STANDARD, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="STANDARD"/>
                                    <DataGridTextColumn Binding="{Binding ACTUAL, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="ACTUAL"/>
                                    <DataGridTextColumn Binding="{Binding RETRY, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="RETRY"/>
                                    <DataGridTextColumn Binding="{Binding TIMEOUT, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="TIMEOUT"/>
                                    <DataGridTextColumn Binding="{Binding JUDGED, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="JUDGED"/>
                                </DataGrid.Columns>

                                <DataGrid.CellStyle>
                                    <Style TargetType="DataGridCell">
                                        <Setter Property="BorderThickness" Value="1,1,1,1"/>
                                        <Setter Property="BorderBrush" Value="#FFDCDCDC"/>
                                    </Style>
                                </DataGrid.CellStyle>

                                <DataGrid.RowStyle>
                                    <Style TargetType="DataGridRow">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding JUDGED}" Value="?">
                                                <Setter Property="Background" Value="{StaticResource colorRowBackgroundReady}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding JUDGED}" Value="waiting...">
                                                <Setter Property="Background" Value="{StaticResource colorRowBackgroundWait}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding JUDGED}" Value="PASS">
                                                <Setter Property="Background" Value="{StaticResource colorRowBackgroundPass}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding JUDGED}" Value="FAIL">
                                                <Setter Property="Background" Value="{StaticResource colorRowBackgroundFail}"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGrid.RowStyle>

                            </DataGrid>
                        </StackPanel>
                    </Expander>

                    <!--Check Buttons-->
                    <Expander IsExpanded="{Binding Path=buttonExpander, Mode=OneWay}" Margin="0,0,0,10">
                        <Expander.Header>
                            <WrapPanel HorizontalAlignment="Left">
                                <CheckBox x:Name="ckBUTTON" Margin="10,0,0,0" IsEnabled="False" IsChecked="{Binding Path=flagBUTTON, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" FontWeight="Bold" VerticalAlignment="Top" Style="{StaticResource androidCheckBox}"></CheckBox>
                                <TextBlock FontSize="14" FontWeight="Bold" Foreground="{Binding ElementName=tbBUTTONstatus, Path=Foreground, Mode=OneWay}" Text="CHECK BUTTONs"></TextBlock>
                                <TextBlock x:Name="tbBUTTONstatus" Height="20" Margin="10,0,0,0" FontSize="14" FontWeight="Bold" Text="{Binding Path=buttonStatusContent, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}">
                                    <TextBlock.Style>
                                        <Style TargetType="TextBlock">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding buttonStatusContent}" Value="=> Waiting...">
                                                    <Setter Property="Foreground" Value="{StaticResource colorTextWait}"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding buttonStatusContent}" Value="=> FAIL">
                                                    <Setter Property="Foreground" Value="{StaticResource colorTextNG}"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding buttonStatusContent}" Value="=> PASS">
                                                    <Setter Property="Foreground" Value="{StaticResource colorTextOK}"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                            </WrapPanel>
                        </Expander.Header>
                        <Expander.Style>
                            <Style TargetType="Expander">
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=ckBUTTON, Path=IsChecked, Mode=OneWay}" Value="True">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Expander.Style>

                        <StackPanel Margin="20,5,0,5">
                            <DataGrid x:Name="buttonDataGrid" ItemsSource="{Binding}" CanUserAddRows="False" AutoGenerateColumns="False" RowHeaderWidth="0" LostFocus="DataGrid_LostFocus" GridLinesVisibility="None">
                                <DataGrid.Columns>
                                    <DataGridTextColumn Binding="{Binding INDEX, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="INDEX"/>
                                    <DataGridTextColumn Binding="{Binding STEPNAME, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="STEPNAME"/>
                                    <DataGridTextColumn Binding="{Binding STANDARD, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="STANDARD"/>
                                    <DataGridTextColumn Binding="{Binding ACTUAL, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="ACTUAL"/>
                                    <DataGridTextColumn Binding="{Binding RETRY, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="RETRY"/>
                                    <DataGridTextColumn Binding="{Binding TIMEOUT, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="TIMEOUT"/>
                                    <DataGridTextColumn Binding="{Binding JUDGED, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="JUDGED"/>
                                </DataGrid.Columns>

                                <DataGrid.CellStyle>
                                    <Style TargetType="DataGridCell">
                                        <Setter Property="BorderThickness" Value="1,1,1,1"/>
                                        <Setter Property="BorderBrush" Value="#FFDCDCDC"/>
                                    </Style>
                                </DataGrid.CellStyle>

                                <DataGrid.RowStyle>
                                    <Style TargetType="DataGridRow">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding JUDGED}" Value="?">
                                                <Setter Property="Background" Value="{StaticResource colorRowBackgroundReady}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding JUDGED}" Value="waiting...">
                                                <Setter Property="Background" Value="{StaticResource colorRowBackgroundWait}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding JUDGED}" Value="PASS">
                                                <Setter Property="Background" Value="{StaticResource colorRowBackgroundPass}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding JUDGED}" Value="FAIL">
                                                <Setter Property="Background" Value="{StaticResource colorRowBackgroundFail}"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGrid.RowStyle>

                            </DataGrid>
                        </StackPanel>
                    </Expander>

                    <!--Check LEDs-->
                    <Expander IsExpanded="{Binding Path=ledExpander, Mode=OneWay}"  Margin="0,0,0,10">
                        <Expander.Header>
                            <WrapPanel HorizontalAlignment="Left">
                                <CheckBox x:Name="ckLED" Margin="10,0,0,0" IsEnabled="False" IsChecked="{Binding Path=flagLED, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" FontWeight="Bold" VerticalAlignment="Top" Style="{StaticResource androidCheckBox}"></CheckBox>
                                <TextBlock FontSize="14" FontWeight="Bold" Foreground="{Binding ElementName=tbLEDstatus, Path=Foreground, Mode=OneWay}" Text="CHECK LEDs"></TextBlock>
                                <TextBlock x:Name="tbLEDstatus" Height="20" Margin="10,0,0,0" FontSize="14" FontWeight="Bold" Text="{Binding Path=ledStatusContent, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}">
                                    <TextBlock.Style>
                                        <Style TargetType="TextBlock">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding ledStatusContent}" Value="=> Waiting...">
                                                    <Setter Property="Foreground" Value="{StaticResource colorTextWait}"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding ledStatusContent}" Value="=> FAIL">
                                                    <Setter Property="Foreground" Value="{StaticResource colorTextNG}"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding ledStatusContent}" Value="=> PASS">
                                                    <Setter Property="Foreground" Value="{StaticResource colorTextOK}"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                            </WrapPanel>
                        </Expander.Header>
                        <Expander.Style>
                            <Style TargetType="Expander">
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=ckLED, Path=IsChecked, Mode=OneWay}" Value="True">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Expander.Style>

                        <StackPanel Margin="20,5,0,5">
                            <DataGrid x:Name="ledDataGrid" ItemsSource="{Binding}" CanUserAddRows="False" AutoGenerateColumns="False" RowHeaderWidth="0" LostFocus="DataGrid_LostFocus" GridLinesVisibility="None">
                                <DataGrid.Columns>
                                    <DataGridTextColumn Binding="{Binding INDEX, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="INDEX"/>
                                    <DataGridTextColumn Binding="{Binding STEPNAME, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="STEPNAME"/>
                                    <DataGridTextColumn Binding="{Binding STANDARD, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="STANDARD"/>
                                    <DataGridTextColumn Binding="{Binding ACTUAL, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="ACTUAL"/>
                                    <DataGridTextColumn Binding="{Binding RETRY, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="RETRY"/>
                                    <DataGridTextColumn Binding="{Binding TIMEOUT, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="TIMEOUT"/>
                                    <DataGridTextColumn Binding="{Binding JUDGED, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Header="JUDGED"/>
                                </DataGrid.Columns>

                                <DataGrid.CellStyle>
                                    <Style TargetType="DataGridCell">
                                        <Setter Property="BorderThickness" Value="1,1,1,1"/>
                                        <Setter Property="BorderBrush" Value="#FFDCDCDC"/>
                                    </Style>
                                </DataGrid.CellStyle>

                                <DataGrid.RowStyle>
                                    <Style TargetType="DataGridRow">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding JUDGED}" Value="?">
                                                <Setter Property="Background" Value="{StaticResource colorRowBackgroundReady}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding JUDGED}" Value="waiting...">
                                                <Setter Property="Background" Value="{StaticResource colorRowBackgroundWait}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding JUDGED}" Value="PASS">
                                                <Setter Property="Background" Value="{StaticResource colorRowBackgroundPass}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding JUDGED}" Value="FAIL">
                                                <Setter Property="Background" Value="{StaticResource colorRowBackgroundFail}"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGrid.RowStyle>

                            </DataGrid>
                        </StackPanel>
                    </Expander>

                </StackPanel>
                
            </ScrollViewer>

            <Grid Grid.Row="3" Margin="10,5,10,5">
                <Button x:Name="btnStart" Click="btnStart_Click" FontSize="15" HorizontalAlignment="Left" Margin="10,0,0,0" Height="40" Width="80">Start</Button>
                <WrapPanel HorizontalAlignment="Right">
                    <Button Visibility="Collapsed" Click="Button_Click"  FontSize="15" HorizontalAlignment="Left" Margin="10,0,0,0" Height="40" Width="80">Test</Button>
                    <Button x:Name="btnConfig" FontSize="15" Click="btn_Click" Margin="10,0,0,0" Height="40" Width="80">Configure</Button>
                    <Button x:Name="btnDefault" FontSize="15" Click="btn_Click" Margin="10,0,0,0" Height="40" Width="80">Default</Button>
                </WrapPanel>
            </Grid>
        </Grid>
    </Border>
</UserControl>
